1. Example Description
    This application demonstrates the usage of a subset of Real Time Drivers that are included in this code drop. It is not part of the production code deliverables.
    1.1 The aplication software functionality
            - Siul2_Port_Ip_Init
                    Initialize the pins used by the application using the Port driver.
            - Clock_Ip_Init
                    Initialize the clock sources for project.
            - IntCtrl_Ip_Init, IntCtrl_Ip_EnableIrq, IntCtrl_Ip_InstallHandler
                    Initializes the interrupts for Lpuart driver
            - Flexio_Mcl_Ip_InitDevice
                    Initializes the Flexio common part for project
            - Lpuart_Uart_Ip_Init
                    Initialize the Lpuart driver
            - Lpuart_Uart_Ip_Deinit
                    Uninitialize the Lpuart driver
            - Flexio_Uart_Ip_Init
                    Initialize the Flexio driver
            - Flexio_Uart_Ip_Deinit
                    Uninitialize the Lpuart driver
            - Lpuart_Uart_Ip_AsyncSend
                    Send Lpuart Uart data
            - Lpuart_Uart_Ip_AsyncReceive
                    Receive Lpuart Uart data
            - Lpuart_Uart_Ip_GetReceiveStatus, Lpuart_Uart_Ip_GetTransmitStatus
                    Get status of Lpuart Uart
            - Flexio_Uart_Ip_AsyncSend
                    Send Flexio Uart data
            - Flexio_Uart_Ip_AsyncReceive
                    Receive Flexio Uart data
            - Flexio_Uart_Ip_GetStatus
                    Get status of Flexio Uart
            - Flexio_Mcl_Ip_DeinitDevice
                    Uninitializes the Flexio common part for project
    1.2 The aplication description
            - The first welcome message is sent via UART: "Hello, This message is sent via Uart!"
            - The second welcome message is sent via UART: "Have a nice day!"
            - User need to check return status of Send_Data() function for verifying example.
2. Installation steps
    2.1 Hardware installation
        2.1.1 Hardware preparation
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1
            - 1 microUSB type B cable
            - 1 Personal Computer
            - 1 S32Debugger (PE micro debugger)
        2.1.2 Connections
            - It uses Lpuart instance 0, comunicates with Flexio instance 0 channel 0 for Rx and channel 1 for Tx (connect PTB1(J3.4) - PTD2(J2.2) and PTC2(J1.5) - PTE5(J3.12))
        2.1.3 Debugger
            - Connect PE micro debugger to the board
    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select this example. Then click on "Finish".
            The project should now be copied into you current workspace.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board in one of two ways below:
        3.3.1 To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k1xx.cmm script.
        Open the cmm script in a text editor and replace the following strings:
            - __TARGET_MEMORY - replace with FLASH (for FLASH configuration)
            - __PATH_TO_ELF - replace with the path to the elf binary files built with S32 DS
        Run this script using T32 Lauterbach debugger after making the changes.
        3.3.2 Click button "Run" or "Debug" on S32 Design Studio (Using PE micro debugger).