1. Example Description
    The purpose of this demo application is to present basic usage of the Adc and Pdb_Adc IP Driver.
    1.1 The application software functionality
    The example uses the software trigger and hardware trigger from Pdb module to trigger ADC conversion.
    The used ADC channel is BandGap (~1.45V corresponding to 1200 with 12 bits resolution at assumed 5.0V reference). The raw read ADC data will be compared
    with provided value. If the result is correct, the program will go through the While loop of checking this result in Adc user notification (AdcConversionCompleteNotif).
    The example is divided in 2 parts:
    - Part 1: The sequences of conversion is triggered using Software triggering from ADC
    - Part 2: The sequences of conversion is triggered using Hardware triggering from Pdb
    Both parts of the example make use of ADC interrupts.
    - Initialize the ADC/PDB modules.
    - Enable ADC IRQs in interrupt controller.
    - Start the ADC conversion by software trigger from ADC
    - Read raw ADC data conversion and compare with provided value
    - Switch ADC trigger from sofware to hardware
    - Configure PDB for triggering.
    - Start the ADC conversion by hardware trigger from Pdb
    - Read raw ADC data conversion and compare with provided value

    1.2 How the example works
    - If all conditions are correct, the code goes to the end of program in the For loop checking exit_code variable, without stuck in any other While loops.

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K116EVB2-Q048 
        2.1.2 Connections
            - There are no specific connections needed for ADC pins
            - Jumper J10: pin 2 and pin 3 must be connected to have 5v voltage reference
        2.1.3 Debugger
            - PnE debugger on board is used.

3. Generating, building and running the example application
    3.1 Generating the S32 configuration
        Before running the example a configuration needs to be generated.  First go to Project Explorer View in S32 DS and select the current project. Select the "S32 Configuration Tool" menu then click on the desired configuration tool (Pins, Cocks, Peripherals etc...). Clicking on any one of those will generate all the components. Make the desired changes(if any) then click on the "S32 Configuration Tool->Update Code" button.
    3.2 Compiling the application
        Select the configuration to be built: FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Use Project > Build to build the project.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, the *.elf binary file
        should be created.
    3.3 Running the application on the board
        Go to Run and select Debug Configurations. There will be a debug configuration for this project:

        Configuration Name                         |     Description
        -------------------------------------------------------------------------------------------
        Adc_Pdb_Ip_example_S32K118_Debug_FLASH_PNE | Debug the FLASH configuration using PnE Debugger

        Select the desired debug configuration and click on Launch. Now the perspective will change to the Debug Perspective.
        Use the controls to control the program flow.
