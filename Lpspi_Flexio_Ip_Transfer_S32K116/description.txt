1. Example Description
    This application demonstrates the usage of SPI driver in Real Time Drivers.
    The application includes a Design Studio project, that uses predefined configurations for the IP layer only (Clock, Pin, Siul2, OsIf, Lpspi, Dma, IntCtrl, Flexio_Mcl_Ip, Flexio_Spi).

    1.1 The application software functionality
            - Clock_Ip_Init
                    Initialize the clock sources, the clock tree and to configure the clock gating of the peripherals.
            - Siul2_Port_Ip_Init
                    Initializes the pins used by the application that configured on the pin tool.
            - IntCtrl_Ip_Init
                    Enable and set priority interrupt vectors configured on peripherals configuration tool.
            - Flexio_Mcl_Ip_InitDevice
                    Initialize the Flexio device which is configured on peripheral tool.
            - Dma_Mcl_Ip_Init
                    Initialize the Dma hardware channels.
            - Lpspi_Ip_Init
                    Initializes the LPSPI physical unit with its configuration data on SpiPhyUnit.
            - Flexio_Spi_Ip_Init
                    Initializes the FLEXIO physical unit with its configuration data on SpiPhyUnit.
            - Lpspi_Ip_UpdateFrameSize
                    Configure number of bits per an transfer for Lpspi instance.
            - Flexio_Spi_Ip_UpdateFrameSize
                    Configure number of bits per an transfer for Flexio_Spi instance.
            - Lpspi_Ip_UpdateLsb
                    Last or most significant bit is transfer first for Lpspi instance.
            - Flexio_Spi_Ip_UpdateLsb
                    Last or most significant bit is transfer first for Flexio_Spi instance.
            - Lspi_Ip_UpdateTransferMode
                    Select polling or interrupt mode in transfer.
            - Lpspi_Ip_AsyncTransmit
                    The slave sets up hardware and wait master start transfer.
            - Flexio_Spi_Ip_SyncTransmit
                    Master start transfer with the slave by synchronous mode.
    1.2 The application description
            - The application uses the SPI driver to transfer data in full-duplex mode.
            - Transfer 10 frames 8 bit via FLEXIO_SPI_0(MASTER) and 10 frames 8 bit  via LPSPI_0(SLAVE).

2. Installation steps
    2.1 Hardware installation
        2.1.1 Supported boards
            - S32K118EVB2-Q048 PCB 47530 RevX1 SCH RevA1

        2.1.2 Connections
            -------------------------------------------------------
                            |              XS32K118EVB2-Q048
            PIN FUNCTION    |--------------------------------------
                            | MASTER(FLEXIO_SPI_0) | SLAVE(LPSPI_0)
            ----------------|--------------------------------------
                CLK         |    J5.8  (PTD0)      | J2.6 (PTB2)
                MISO        |    J5.9  (PTD1)      | J2.4 (PTB4)
                MOSI        |    J5.6  (PTA0)      | J2.5 (PTB3)
                CS0         |    J5.7  (PTA1)      | J2.3 (PTB5)
            -------------------------------------------------------
            Connecting the same name pins of master and slave together.

        2.1.3 Debugger
            PNE Debugger (optional, users can use Open SDA).

    2.2 Software installation
        2.2.1 Importing the S32 Design Studio project
            After opening S32 Design Studio, go to "File -> New -> S32DS Project From Example" and select "Lpspi_Flexio_Ip_Transfer_S32M244". Then click on "Finish".
            The project should now be copied into you current workspace.

3. Building the example application
    3.1 Generation the code by switch to Peripherals/Pin/Clock tools and click the button "Update Code"
    3.2 Compiling the application
        Select the configuration to be built: RAM (Debug_RAM), or FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the build button in eclipse.
        Wait for the build action to be completed before continuing to the next step. Check the compiler console for error messages; upon completion, Lpspi_Flexio_Ip_Transfer_S32M244.elf binary file should be created.
    3.3 Running the application on the board in one of two ways below:
        3.3.1 To execute the example application load the executable file to the evaluation board using the Lauterbach debugger and the s32k1xx.cmm script.
        Open the cmm script in a text editor and replace the following strings:
            - __TARGET_MEMORY - replace with RAM (for RAM configuration), or FLASH (for FLASH configuration)
            - __PATH_TO_ELF - replace with the path to the elf binary files built with S32 DS
        Run this script using T32 Lauterbach debugger after making the changes.
        3.3.2 Click button "Run" or "Debug" on S32 Design Studio.